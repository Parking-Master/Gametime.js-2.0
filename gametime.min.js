/**
  * @license
  * Copyright (c) 2021 Parking-Master / (Gametime.js)
  * Licensed under the MIT License (https://mit-license.org)
  * More license and copyright information at https://github.com/Parking-Master/Gametime.js/blob/main/LICENSE
*/
function setCookie(e,n,t){let i="";if(t){let e=new Date;e.setTime(e.getTime()+24*t*60*60*1e3),i="; expires="+e.toUTCString()}document.cookie=e+"="+(n||"")+i+"; path=/"}function getCookie(e){let n=e+"=",t=decodeURIComponent(document.cookie).split(";");for(let e=0;e<t.length;e++){let i=t[e];for(;" "==i.charAt(0);)i=i.substring(1);if(0==i.indexOf(n))return i.substring(n.length,i.length)}return null}window.pubnub=void 0,window.ms=Date.now(),window.addEventListener("load",(()=>{ms=Date.now()-ms})),window.addEventListener("beforeunload",(()=>{setCookie("pubnub-time-token",`${(new Date).getTime()}0000`,10)})),window.gametime={},gametime.onconnect=null,gametime.ondisconnect=null,window.gametime.events=[],window.gametime.events.functions=[],gametime.connected=!1,gametime.set=function(e,n,t){return function(e,n,t){if("key"==e){let e=n,i=t,o=document.createElement("script");o.src="https://cdn.pubnub.com/sdk/javascript/pubnub.4.21.7.min.js",document.body.appendChild(o);let m=setInterval((function(){if("undefined"!=typeof PubNub){clearInterval(m);const n=PubNub.generateUUID();pubnub=new PubNub({publishKey:e,subscribeKey:i,uuid:n}),gametime.user={},gametime.user.id=n,pubnub.addListener({message:function(e){new Function("("+decodeURIComponent(e.message)+")();")()},presence:function(e){console.log(e.uuid)}}),setTimeout((function(){let e=(ms.toFixed(0)-0)/(1.5*ms);console.info("%cGametime.js connecting in "+e.toFixed(0)+" second(s)...","font-family: Arial, helvetica, sans-serif;"),delete ms;const n=encodeURIComponent('function(){console.info("%cGametime.js successfully connected!","font-family: Arial, helvetica, sans-serif;");}');pubnub.publish({channel:gametime.channel,message:n},(function(e,n){if(e.error)throw gametime.connected=!1,new Error("An error occurred while trying to establish a connection with Gametime.js.\nMake sure the Publish/Subscribe keys are correct and that you are on the right channel.");gametime.connected=!0,"function"==typeof gametime.onconnect&&gametime.onconnect(),gametime.didConnect()}))}),3e3)}}),250)}else"channel"==e?(void 0===pubnub?setTimeout((function(){pubnub.subscribe({channels:[n],timetoken:getCookie("pubnub-time-token"),message:function(e){if("unsubscribe"==e.type)return pubnub.unsubscribe({channel:e.channel})},withPresence:!0})}),900):pubnub.subscribe({channels:n,withPresence:!0}),window.gametime.channel=n):"join-max-length"==e?gametime.join.maxLength="string"==typeof n?parseFloat(n,0):n:"join-min-length"==e&&(gametime.join.minLength="string"==typeof n?parseFloat(n,0):n)}(e,n,t)},gametime.make=function(e){let n;return n=e,void window.gametime.events.push(n)},gametime.on=function(e,n){return function(e,n){if(!(window.gametime.events.indexOf(e)>-1))throw new ReferenceError('Event "'+e.toString()+'" not found');let t=document.createElement("script"),i=(n=n.toString()).split("{")[0],o=n.toString().split("{")[0].split("(").pop().split(")").shift(),m=n.substring(n.indexOf("{")+1);o=o||"undefined",n=i+"{pubnub.publish({channel:'"+gametime.channel+"',message:'"+(encodeURIComponent(i)+"{var "+o+' = "ncmmmasptr__ + '+o+' + ncmmmasptr__";'+encodeURIComponent(m)).replace(/\'/g,"\\'").replace(/ncmmmasptr__/g,"'")+"'});}",t.textContent="gametime.events.functions."+e+" = "+n+";",document.body.appendChild(t)}(e,n)},gametime.recursion=0,gametime.run=function(e,n){return function(e,n){n&&void 0!==n||(n=[""]);for(let t=[],i=0;i<n.length;i++)t.push('"'+n[i]+'"'),new Function("gametime.events.functions."+e+"("+t+")")()}(e,n)},window.gametime.join={},gametime.join.maxLength=2,gametime.join.minLength=2,gametime.disconnect=function(){gametime.connected=!1,pubnub.publish({channel:"control",message:{command:"unsubscribe",channel:gametime.channel}}),pubnub.disconnect()},window.addEventListener("load",(function(){window.gametime.connectedPlayers=0,window.willBeAutoHost=!1,window.isHost=!1,window.Guest=!1,window.gametime.idList=[],gametime.make("collectId"),gametime.make("renderScene"),gametime.make("isGuest"),gametime.on("isGuest",(()=>{!isHost&&(gametime.user.position=2,isGuest=!0,isHost=!1)})),gametime.on("renderScene",(function(){gametime.connectedPlayers+=1,setTimeout((()=>{1==gametime.connectedPlayers&&(willBeAutoHost=!0)}),0)})),gametime.on("collectId",(e=>{gametime.idList.push(e),gametime.idList=[...new Set(gametime.idList)]})),window.gametime.didConnect=function(){gametime.run("collectId",[gametime.user.id]),gametime.run("renderScene"),setInterval((()=>{gametime.user.position=gametime.idList[0]==gametime.user.id?1:2})),willBeAutoHost?(isHost=!0,isGuest=!1):(isHost=!1,isGuest=!0),gametime.run("isGuest")}}));
